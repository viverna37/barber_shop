from aiogram.types import CallbackQuery
from aiogram.utils.callback_data import CallbackData
from src.states.user import Machine, COUNT, Add_cart, edit_cart, add_categoty, update_category, NUMBER

from src.services.sql import DataBase
from src.bot import dp, bot
from aiogram.dispatcher import FSMContext
from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import Message

from src.keyboards.menu import keyboards

import base64

#methods
cb = CallbackData('btn', 'type', 'product_id', 'categori_id', 'count')
db = DataBase('piro_database.db')







#number_phone, STATE_MACHINE
@dp.message_handler(text=('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'), state=NUMBER.NUMBer)
async def next(message: types.Message, state: FSMContext):
    data = await db.admin(message.chat.id)
    if data[0][0] == 1:
        await bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=keyboards.admin)
        await state.finish()
    else:
        pass

@dp.message_handler(text=('–ò–∑–º–µ–Ω–∏—Ç—å'), state=NUMBER.NUMBer)    
async def next(message: types.Message, state: FSMContext):
    await bot.send_message(message.from_user.id, f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')


@dp.message_handler(text=('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'), state=NUMBER.NUMBer)    
async def next(message: types.Message, state: FSMContext):
    await bot.send_message(message.from_user.id, f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=keyboards.menu)
    await state.finish()
    
@dp.message_handler(lambda message: not message.text.isdigit(), state=NUMBER.NUMBer)
async def number(message: types.Message):
    await bot.send_message(message.chat.id, '–ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç')

@dp.message_handler(content_types=['text'], state=NUMBER.NUMBer)
async def number(message: types.Message, state: FSMContext) -> None:
    data = message.text
    await db.number(message.chat.id, data)
    await bot.send_message(message.from_user.id, f'–ù–æ–º–µ—Ä {data} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω', reply_markup=keyboards.supmenu)
    await bot.send_message(message.chat.id, '–í—Å–µ –≤–µ—Ä–Ω–æ?')





#menu
@dp.message_handler(text=('–¢–æ–≤–∞—Ä—ã'))
async def start(message: Message):
    data = await db.get_categories()
    categories = InlineKeyboardMarkup()
    for i in data:
        categories.add(InlineKeyboardButton(text = f'{i[0]}', callback_data=f"btn:categori:-:{i[1]}:-"))
    await bot.send_message(message.chat.id, f'–ù–∞—à –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç:', reply_markup=categories)
    await bot.delete_message(message.chat.id, message.message_id)

@dp.callback_query_handler(cb.filter(type='categori'))
async def goods(call: CallbackQuery, callback_data: dict):
    data = await db.get_products(callback_data.get('categori_id'))
    keyboard = await gen_products(data, call.message.chat.id)

    await call.message.edit_reply_markup(keyboard)

@dp.callback_query_handler(cb.filter(type='view'))
async def wiev(call: CallbackQuery, callback_data: dict):
    data = await db.products(callback_data.get('product_id'), callback_data.get('categori_id'))
    count = await db.get_count_in_cart_mb(call.message.chat.id, callback_data.get('product_id'))
    count = str(count).strip("[('',)]")
    for i in data:
        keyboard = InlineKeyboardMarkup().add(InlineKeyboardButton(text='–í –∫–æ—Ä–∑–∏–Ω—É', callback_data=f'btn:cart:{i[1]}:{i[5]}:-')).add(InlineKeyboardButton(text='üîº', callback_data=f'btn:plus:{i[1]}:{i[5]}:-'), InlineKeyboardButton(text=f'{count} —à—Ç', callback_data=f'btn:count_btn:-:-:{i[1]}'), InlineKeyboardButton(text='üîΩ', callback_data=f'btn:minus:{i[1]}:{i[5]}'))\
            .add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data=f'btn:back:{i[1]}:{i[5]}:-'))
        await bot.send_photo(call.message.chat.id, photo=f'{i[6]}', caption=f'–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {i[2]} \n–û–ø–∏—Å–∞–Ω–∏–µ:{i[7]}\n–¶–µ–Ω–∞: {i[3]}p \n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ: {i[4]}', reply_markup=keyboard)


async def qw(data, user_id, count):
    count1 = (str(count).strip("[('',)]"))
    count2 = int(count1)

    for i in data:
        keyboard = InlineKeyboardMarkup().add(InlineKeyboardButton(text='–í –∫–æ—Ä–∑–∏–Ω—É', callback_data=f'btn:cart:{i[1]}:{i[5]}:-')).add(InlineKeyboardButton(text='üîº', callback_data=f'btn:plus:{i[1]}:{i[5]}:{count}'), InlineKeyboardButton(text=f'{count2} —à—Ç', callback_data=f'btn:count_btn:-:-:{i[5]}'), InlineKeyboardButton(text='üîΩ', callback_data=f'btn:minus:{i[1]}:{i[5]}:{count}'))\
            .add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data=f'btn:back:{i[1]}:{i[5]}:-'))
    return keyboard

@dp.callback_query_handler(cb.filter(type="plus"))
async def plus(call: CallbackQuery, callback_data: dict):
    product_id = callback_data.get('product_id')
    count_in_cart_mb = await db.get_count_in_cart_mb(call.message.chat.id, product_id)
    count_in_stock = await db.get_count_in_stock(product_id)
    if count_in_stock[0][0] == 0:
        await bot.send_message(call.message.chat.id, '–¢–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏')
        return 0
    elif not count_in_cart_mb or count_in_cart_mb[0][0] == 0:
        await db.add_to_cart_mb(call.message.chat.id, product_id, 1)
    elif count_in_stock[0][0]>count_in_cart_mb[0][0]:
        await db.change_count_mb(count_in_cart_mb[0][0]+1, call.message.chat.id, product_id)
    else:
        await bot.send_message(call.message.chat.id, '–ë–æ–ª—å—à–µ —Ç–æ–≤–∞—Ä–∞ –≤ –Ω–∞–ª–∏—á–∏–∏ –Ω–µ—Ç')
        return 0
    count_in_cart_mb = await db.get_count_in_cart_mb(call.message.chat.id, product_id)
    data = await db.products(callback_data.get('product_id'), callback_data.get('categori_id'))
    keyboard = await  qw(data, call.message.chat.id, count_in_cart_mb)

    await call.message.edit_reply_markup(keyboard)


@dp.callback_query_handler(cb.filter(type="minus"))
async def plus(call: CallbackQuery, callback_data: dict):
    product_id = callback_data.get('product_id')
    count_in_cart_mb = await db.get_count_in_cart_mb(call.message.chat.id, product_id)
    if not count_in_cart_mb or count_in_cart_mb[0][0] == 0:
        await bot.send_message(call.message.chat.id, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ')
        return 0
    elif count_in_cart_mb[0][0] == 1:
        mb = 0
        await db.remowe_one_item_mb(mb, call.message.chat.id, product_id)
        
    else:
        await db.change_count_mb(count_in_cart_mb[0][0] - 1, call.message.chat.id, product_id)
    count_in_cart_mb = await db.get_count_in_cart_mb(call.message.chat.id, product_id)
    data = await db.products(callback_data.get('product_id'), callback_data.get('categori_id'))
    keyboard = await  qw(data, call.message.chat.id, count_in_cart_mb)

    await call.message.edit_reply_markup(keyboard)

@dp.callback_query_handler(cb.filter(type="back"))
async def asdf(call: CallbackQuery, callback_data: dict):
    data = await db.get_products(callback_data.get('categori_id'))
    # await bot.send_message(call.message.chat.id, f'{data}')
    keyboard = await gen_products(data, call.message.chat.id)
    await bot.send_message(call.message.chat.id, f'–ù–∞—à –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç:', reply_markup=keyboard)
    # data = await db.get_categories()
    # keyboard = InlineKeyboardMarkup()
    # for i in data:
    #     keyboard.add(InlineKeyboardButton(text=f'{i[0]}', callback_data=f'btn:categori:-:{i[1]}:-'))
    # await call.bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=keyboard)

@dp.callback_query_handler(cb.filter(type="back1"))
async def asdf(call: CallbackQuery, callback_data: dict):
    data = await db.get_categories()
    keyboard = InlineKeyboardMarkup()
    for i in data:
        keyboard.add(InlineKeyboardButton(text=f'{i[0]}', callback_data=f'btn:categori:-:{i[1]}:-'))
    await call.bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=keyboard)

@dp.callback_query_handler(cb.filter(type='cart'))
async def wiev(call: CallbackQuery, callback_data: dict):
    count = await db.get_count_in_cart_mb(call.message.chat.id, callback_data.get('product_id'))
    await db.add_to_cart(count[0][0], call.message.chat.id, callback_data.get('product_id'))
    await bot.send_message(call.from_user.id, '–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É')
#conact_information
@dp.message_handler(text=('–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'))
async def start(message: Message):
    await bot.send_message(message.chat.id, '<b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n'
                                            '<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: </b>89621193001\n'
                                            '<b>–ü–æ—á—Ç–∞: </b>alexnervous1@gmail.com\n'
                                            '<b>–ê–¥—Ä–µ—Å—Å: </b> –≥. –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤—Å–∫ - –°–∞—Ö–∞–ª–∏–Ω—Å–∫–∏–π',
                           parse_mode=types.ParseMode.HTML)
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
#cart_wiev
@dp.message_handler(text=('–ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞'))
async def start(message: Message):
    items1 = await db.view_cart(message.chat.id)
    items = list(filter(lambda x: not None in x, items1))

    if len(items) == 0:
        await bot.send_message(message.chat.id, '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –≤ –º–µ–Ω—é')
    else:
        pr = ''
        Mess = '–¢–æ–≤–∞—Ä—ã, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –≤ –∫–æ—Ä–∑–∏–Ω—É:\n'
        for item in items:
            name1 = await db.name(item[0])
            name = (str(name1).strip("[('',)],"))
            count3 = await db.count(item[0], message.chat.id)
            count2 = list(filter(lambda x: not None in x, count3))
            count1 = (str(count2).strip("[('',)],"))
            # count1 = int(count2[1][0])
            count = int(count1)
            # await bot.send_message(message.chat.id, f'{count}')
            price1 = await db.price(item[0])
            price = (str(price1).strip("[('',)],"))
            all_price2 = await db.price(item[0])
            all_price1 = (str(all_price2).strip("[('',)],"))
            all_price = int(all_price1) * int(count)
            pr += f'{all_price} '
            Mess += f'\n<b>{name}: {count}—à—Ç, —Ü–µ–Ω–∞: {price} —Ä—É–±</b>\n'
            nums_sum = round(sum(int(x) for x in pr.split()), 2)
        await bot.send_message(message.chat.id, text=(f'{Mess}\n<b>–ò—Ç–æ–≥–æ: {nums_sum} —Ä—É–±</b>'),parse_mode=types.ParseMode.HTML, reply_markup=keyboards.korzina)

# #cart_clear
@dp.message_handler(text=('–û—á–∏—Å—Ç–∏—Ç—å'))
async def empty_cart(message: Message):
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    await db.empty_cart(message.chat.id)
    await message.answer('–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞')
#BACK
@dp.message_handler(text=('–ù–∞–∑–∞–¥'))
async def empty_cart(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboards.menu)
#payments
@dp.message_handler(text=('–û–ø–ª–∞—Ç–∏—Ç—å'))
async def buy_process(message: Message):
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    data1 = await db.view_cart(message.chat.id)
    data = list(filter(lambda x: not None in x, data1))
    if len(data) == 0:
        await bot.send_message(message.chat.id, '–ö–æ—Ä–∏–∑–Ω–∞ –ø—É—Å—Ç–∞\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤ –º–µ–Ω—é')
    else:
        await bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å—Å –¥–æ—Å—Ç–∞–≤–∫–∏')
        await Machine.adress.set()
#MACHINE_STATE_adres&P2P
@dp.message_handler(content_types=['text'], state=Machine.adress)
async def adres(message: types.Message, state: FSMContext) -> None:

    adres1 = message.text
    await db.adres(adres1, message.chat.id)

    await bot.send_message(message.chat.id, f'–ê–¥—Ä–µ—Å –∑–∞–ø–∏—Å–∞–Ω\n–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç –ø—É–Ω–∫—Ç', reply_markup=keyboards.yorn)
    await Machine.next()

@dp.message_handler(text=('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'), state=Machine.comment)
async def next(message: types.Message, state: FSMContext):
    await bot.send_message(message.chat.id, "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–º–µ–Ω–µ–Ω–∞", reply_markup=keyboards.korzina)
    await state.finish()
    data1 = await db.view_cart(message.chat.id)
    data = list(filter(lambda x: not None in x, data1))
    if len(data) == 0:
        await bot.send_message(message.chat.id, '–ö–æ—Ä–∏–∑–Ω–∞ –ø—É—Å—Ç–∞\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤ –º–µ–Ω—é')
    else:
        product_id1 = await db.view_cart(message.chat.id)
        product_id = list(filter(lambda x: not None in x, product_id1))
        nnn = ''
        for i in product_id:
            all_price2 = await db.price(i[0])
            all_price1 = (str(all_price2).strip("[('',)],"))
            count2 = await db.count(i[0], message.chat.id)
            count1 = (str(count2).strip("[('',)],"))
            count = int(count1)
            all_price = int(all_price1) * int(count)
            nnn += f'{all_price} '

            nums_sum = round(sum(int(x) for x in nnn.split()), 2)
            print(nums_sum)

        letters_and_digits = string.ascii_lowercase + string.digits
        rand_string = ''.join(random.sample(letters_and_digits, 10))
        quickpay = Quickpay(
            receiver='4100118138252391',
            quickpay_form='shop',
            targets='Test',
            paymentType='SB',
            sum=nums_sum,
            label=rand_string
        )

        await db.update_label(rand_string, message.chat.id)

        claim_keyboard = InlineKeyboardMarkup(inline_keyboard=[[]])
        claim_keyboard.add(InlineKeyboardButton(text='–û–ø–ª–∞—Ç–∏—Ç—å',
                                                    url=quickpay.redirected_url))
        claim_keyboard.add(InlineKeyboardButton(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É',
                                                    callback_data='btn:claim'))
        await bot.send_message(message.chat.id,
                                text = ('–û–ø–ª–∞—Ç–∏—Ç–µ –∑–∞–∫–∞–∑, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É"'),
                                reply_markup=claim_keyboard)


@dp.message_handler(content_types=['text'], state=Machine.comment)
async def adres(message: types.Message, state: FSMContext) -> None:
    await bot.send_message(message.chat.id, "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–º–µ–Ω–µ–Ω–∞", reply_markup=keyboards.korzina)

    comment = message.text
    await db.comment(comment, message.chat.id)
    await state.finish()
    data1 = await db.view_cart(message.chat.id)
    data = list(filter(lambda x: not None in x, data1))
    if len(data) == 0:
        await bot.send_message(message.chat.id, '–ö–æ—Ä–∏–∑–Ω–∞ –ø—É—Å—Ç–∞\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤ –º–µ–Ω—é')
    else:
        product_id1 = await db.view_cart(message.chat.id)
        product_id = list(filter(lambda x: not None in x, product_id1))
        nnn = ''
        for i in product_id:
            all_price2 = await db.price(i[0])
            all_price1 = (str(all_price2).strip("[('',)],"))
            count2 = await db.count(i[0], message.chat.id)
            count1 = (str(count2).strip("[('',)],"))
            count = int(count1)
            all_price = int(all_price1) * int(count)
            nnn += f'{all_price} '

            nums_sum = round(sum(int(x) for x in nnn.split()), 2)
            print(nums_sum)

        letters_and_digits = string.ascii_lowercase + string.digits
        rand_string = ''.join(random.sample(letters_and_digits, 10))
        quickpay = Quickpay(
            receiver='4100118138252391',
            quickpay_form='shop',
            targets='Test',
            paymentType='SB',
            sum=nums_sum,
            label=rand_string
        )

        await db.update_label(rand_string, message.chat.id)

        claim_keyboard = InlineKeyboardMarkup(inline_keyboard=[[]])
        claim_keyboard.add(InlineKeyboardButton(text='–û–ø–ª–∞—Ç–∏—Ç—å',
                                                    url=quickpay.redirected_url))
        claim_keyboard.add(InlineKeyboardButton(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É',
                                                    callback_data='btn:claim'))
        await bot.send_message(message.chat.id,
                                text = ('–û–ø–ª–∞—Ç–∏—Ç–µ –∑–∞–∫–∞–∑, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É"'),
                                reply_markup=claim_keyboard)

#                                                                                   AMIN_PANEL

@dp.message_handler(text=('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'))
async def start(message: Message):
    data = await db.admin(message.chat.id)
    if data[0][0] == 1:
        await bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=keyboards.admin)
    else:
        pass

cbd = CallbackData('butn', 'type', 'product_id', 'category_id')
forms = {
    'category': 1,
    'img': 1,
    'name': 1,
    'opp': 1,
    'price': 1,
    'stock': 1,
    'name_category': 1
}

stock = {
    "product_id": 1
}


@dp.message_handler(text=('–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É'))
async def start(message: Message):
    keyboard = InlineKeyboardMarkup()
    data = await db.get_categories()
    for i in data:
        keyboard.add(InlineKeyboardButton(text=f'{i[0]}', callback_data=f'butn:category:-:{i[1]}'))
    await bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –∫–∞—Ä—Ç–æ—á–∫–∞', reply_markup=keyboard)

@dp.callback_query_handler(cbd.filter(type='category'))
async def category(call: CallbackQuery, callback_data: dict):
    await bot.send_message(call.message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏')
    forms['category'] = callback_data.get('category_id')
    await Add_cart.photo.set()

@dp.message_handler(content_types=['photo'], state=Add_cart.photo)
async def number(message: types.Message, state: FSMContext) -> None:
    photo = message.photo[0].file_id
    forms['img'] = photo
    await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏")
    await Add_cart.next()

@dp.message_handler(content_types=['text'], state=Add_cart.name)
async def number(message: types.Message, state: FSMContext) -> None:
    name = message.text
    forms['name'] = name
    await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏")
    await Add_cart.next()

@dp.message_handler(content_types=['text'], state=Add_cart.opp)
async def number(message: types.Message, state: FSMContext) -> None:
    opp = message.text
    forms['opp'] = opp
    await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏")
    await Add_cart.next()

@dp.message_handler(lambda message: not message.text.isdigit(), state=Add_cart.price)
async def number(message: types.Message):
    await bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–µ–∑ –±—É–∫–≤–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π')

@dp.message_handler(content_types=['text'], state=Add_cart.price)
async def number(message: types.Message, state: FSMContext) -> None:
    price = message.text
    forms['price'] = price
    await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏")
    await Add_cart.next()

@dp.message_handler(lambda message: not message.text.isdigit(), state=Add_cart.stock)
async def number(message: types.Message):
    await bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–µ–∑ –±—É–∫–≤–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π')

@dp.message_handler(content_types=['text'], state=Add_cart.stock)
async def number(message: types.Message, state: FSMContext) -> None:
    stock = message.text
    forms['stock'] = stock
    await db.add_cart_photo(forms['name'], forms['price'], forms['stock'], forms['category'], forms['img'], forms['opp'])
    await bot.send_message(message.chat.id, "–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–∫–æ–Ω—á–µ–Ω–æ, –∫–∞—Ä—Ç–æ—á–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
    await state.finish()


@dp.message_handler(text=('–£–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É'))
async def start(message: Message):
    data = await db.get_categories()
    keyboard = InlineKeyboardMarkup()
    for i in data:
        keyboard.add(InlineKeyboardButton(text=f'{i[0]}', callback_data=f'butn:del_product:-:{i[1]}'))
    await bot.send_message(message.chat.id, '–ò–∑ –∫–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ —É–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É?', reply_markup=keyboard)

@dp.callback_query_handler(cbd.filter(type='del_product'))
async def category(call: CallbackQuery, callback_data: dict):
    data = await db.get_products(callback_data.get('category_id'))
    keyboard = InlineKeyboardMarkup()
    for i in data:
        keyboard.add(InlineKeyboardButton(text=f'{i[2]}', callback_data=f'butn:del_products:{i[1]}:-'))
    await bot.send_message(call.message.chat.id, '–ö–∞–∫—É—é –∫–∞—Ä—Ç–æ—á–∫—É –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ —É–¥–∞–ª–∏—Ç—å?', reply_markup=keyboard)

@dp.callback_query_handler(cbd.filter(type='del_products'))
async def category(call: CallbackQuery, callback_data: dict):
    await db.del_cart(callback_data.get('product_id'))
    await db.del_product(callback_data.get('product_id'))
    await bot.send_message(call.message.chat.id, '–ö–∞—Ä—Ç–æ—á–∫–∞ —É–¥–∞–ª–µ–Ω–∞')


@dp.callback_query_handler(cbd.filter(type='product'))
async def category(call: CallbackQuery, callback_data: dict):
    await db.del_cart(callback_data.get('product_id'))
    await bot.send_message(call.message.chat.id, '–ö–∞—Ä—Ç–æ—á–∫–∞ —É–¥–∞–ª–µ–Ω–∞')


@dp.message_handler(text=('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É'))
async def start(message: Message):
    data = await db.get_categories()
    keyboard = InlineKeyboardMarkup()
    for i in data:
        keyboard.add(InlineKeyboardButton(text=f'{i[0]}', callback_data=f'butn:stock:-:{i[1]}'))
    await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ç–æ–≤–∞—Ä", reply_markup=keyboard)

@dp.callback_query_handler(cbd.filter(type='stock'))
async def category(call: CallbackQuery, callback_data: dict):
    data = await db.get_products(callback_data.get('category_id'))
    keyboard = InlineKeyboardMarkup()
    for i in data:
        keyboard.add(InlineKeyboardButton(text=f'{i[2]}', callback_data=f'butn:stock_product:{i[1]}:-'))
    await bot.send_message(call.message.chat.id, '–£ –∫–∞–∫–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –ø–æ–º–µ–Ω—è—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ?', reply_markup=keyboard)

@dp.callback_query_handler(cbd.filter(type='stock_product'))
async def category(call: CallbackQuery, callback_data: dict):
    stock['product_id'] = callback_data.get("product_id")
    await bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ')
    await edit_cart.stock.set()

@dp.message_handler(content_types=['text'], state=edit_cart.stock)
async def number(message: types.Message, state: FSMContext) -> None:
    count = message.text
    await db.update_stock(count, stock['product_id'])
    await bot.send_message(message.chat.id, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ –∏–∑–º–µ–Ω–µ–Ω–æ")
    await state.finish()
#
#
@dp.message_handler(text=('–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é'))
async def start(message: Message):
    await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
    await add_categoty.name.set()

@dp.message_handler(content_types=['text'], state=add_categoty.name)
async def number(message: types.Message, state: FSMContext) -> None:
    name = message.text
    await db.add_category(name)
    await bot.send_message(message.chat.id, "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞")
    await state.finish()



@dp.message_handler(text=('–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é'))
async def start(message: Message):
    data = await db.get_categories()
    keyboard = InlineKeyboardMarkup()
    for i in data:
        keyboard.add(InlineKeyboardButton(text=f'{i[0]}', callback_data=f'butn:del_category:-:{i[1]}'))
    await bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å', reply_markup=keyboard)

@dp.callback_query_handler(cbd.filter(type='del_category'))
async def category(call: CallbackQuery, callback_data: dict):
    await db.del_category(callback_data.get('category_id'))

    data = await db.get_products(callback_data.get('category_id'))
    for i in data:
        await db.del_product(i[1])
    await bot.send_message(call.message.chat.id, '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞')

@dp.message_handler(text=('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é'))
async def start(message: Message):
    data = await db.get_categories()
    keyboard = InlineKeyboardMarkup()
    for i in data:
        keyboard.add(InlineKeyboardButton(text=f'{i[0]}', callback_data=f'butn:red_category:-:{i[1]}'))
    await bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–º—è', reply_markup=keyboard)

@dp.callback_query_handler(cbd.filter(type='red_category'))
async def category(call: CallbackQuery, callback_data: dict):
    forms['category'] = callback_data.get('category_id')
    await bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
    await update_category.name.set()


@dp.message_handler(content_types=['text'], state=update_category.name)
async def number(message: types.Message, state: FSMContext) -> None:
    name = message.text
    print(name)
    print(forms['category'])
    await db.update_categoory(name, forms['category'])
    await bot.send_message(message.chat.id, "–ò–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–æ")
    await state.finish()


@dp.message_handler(text=('–ù–∞–∑–∞–¥'))
async def start(message: Message):
    await bot.send_message(message.chat.id, '–í—ã –≤ –º–µ–Ω—é', reply_markup=keyboards.menu)