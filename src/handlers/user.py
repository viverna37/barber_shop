
from aiogram.types import Message
from aiogram.dispatcher.filters import Command
from src.services.sql import DataBase
from src.bot import bot, dp
from aiogram.types import CallbackQuery

from aiogram.utils.callback_data import CallbackData
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

import datetime
from datetime import datetime, timedelta

from src.keyboards.menu import menu
db = DataBase('barber.db')
cb = CallbackData('btn', 'type', 'id')

async def cron(bot: Bot)


@dp.message_handler(content_types='photo')
async def photo(message: Message):
    print(message.photo[0].file_id)
@dp.message_handler(Command('start'))
async def start(message: Message):
    await bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}üëã'
                                            f'\n\n –†—ã–¥–∞ –≤–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ –±–∞—Ä–±–µ—Ä-—â–æ–ø–∞ "–ß–µ—Ç–≤–µ—Ä–≥"'
                                            f'\n\n –ó–¥–µ—Å—å –ø—Ä–∏–≤–µ–¥—É—Ç –≤–∞—à—É –≥–æ–ª–æ–≤—É –≤ –ø–æ—Ä—è–¥–æ–∫üíÜ'
                                            f'\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é –Ω–∏–∂–µüëáüëáüëá')
    if await db.get_users(message.chat.id) == None:
        await db.add_users(message.chat.id)
    await message.reply("üíà–û–°–ù–û–í–ù–û–ï –ú–ï–ù–Æüíà", reply_markup=menu.menu)

@dp.callback_query_handler(lambda call: call.data == 'action')
async def a(callback: CallbackQuery):
    await bot.send_photo(callback.message.chat.id, photo='AgACAgIAAxkBAAPTZOyVCv4ugXh5_nNNR93ncQw7PWYAAkfOMRvCn2hLOPVLrx3k9scBAAMCAANzAAMwBA')
    await callback.answer()
@dp.callback_query_handler(lambda call: call.data == 'price')
async def a(callback: CallbackQuery):
    await bot.send_photo(callback.message.chat.id, photo='AgACAgIAAxkBAAPTZOyVCv4ugXh5_nNNR93ncQw7PWYAAkfOMRvCn2hLOPVLrx3k9scBAAMCAANzAAMwBA')
    await callback.answer()

@dp.callback_query_handler(lambda call: call.data == 'review')
async def a(callback: CallbackQuery):
    items = await db.get_filials()
    keyboard = InlineKeyboardMarkup()
    for i in items:
        keyboard.add(
            InlineKeyboardButton(f'{i[2]}', callback_data=f'btn:review:{i[1]}')
        )
    await bot.send_message(callback.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤', reply_markup=keyboard)
    await callback.answer()

@dp.callback_query_handler(cb.filter(type='review'))
async def review(call: CallbackQuery, callback_data: dict):
    keyboard = InlineKeyboardMarkup()
    items = await db.get_info_filials(callback_data.get('id'))
    for i in items:
        keyboard.add(
            InlineKeyboardButton(f'Yandex –∫–∞—Ä—Ç—ã', url=f'{i[3]}'),
            InlineKeyboardButton(f'Google –∫–∞—Ä—Ç—ã', url=f'{i[4]}'),
            InlineKeyboardButton(f'2–ì–ò–° –∫–∞—Ä—Ç—ã', url=f'{i[5]}')
        )
    await bot.send_message(call.message.chat.id, '–í–æ—Ç –æ—Ç–∑—ã–≤—ã –¥–∞–Ω–Ω–æ–≥–æ —Ñ–∏–ª–ª–∏–∞–ª–∞', reply_markup=keyboard)
    await call.answer()

@dp.callback_query_handler(lambda call: call.data == 'opp')
async def a(callback: CallbackQuery):
    keyboards = InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton(text='7 –¥–Ω–µ–π - "–°—Ç–∏–ª—å –ë—Ä—ç–¥ –ü–∏—Ç–∞"', callback_data='btn:opp:7'),
        InlineKeyboardButton(text='14 –¥–Ω–µ–π - "–ß–µ—Ç–≤–µ—Ä–≥ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç"', callback_data='btn:opp:14'),
        InlineKeyboardButton(text='21 –¥–µ–Ω—å - "–û–±—Ä–æ—Å–± –Ω–æ –µ—â–µ —Ç–µ—Ä–ø–∏–º–æ"', callback_data='btn:opp:21'),
        InlineKeyboardButton(text='28 –¥–Ω–µ–π - "Face_id —Ç–µ–±—è –Ω–µ —É–∑–Ω–∞–µ—Ç"', callback_data='btn:opp:28'),
    )
    await bot.send_message(callback.message.chat.id, '–ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –º–Ω–µ –≤–∞–º –Ω–∞–ø–æ–º–Ω–∏—Ç—å?', reply_markup=keyboards)
    await callback.answer()
@dp.callback_query_handler(cb.filter(type='opp'))
async def review(call: CallbackQuery, callback_data: dict):
    days = callback_data.get('id')
    days = int(days)
    datatime = datetime.today().date()
    datetime_opp = datatime + timedelta(days=days)
    await db.update_opp(datetime_opp, call.message.chat.id)

    await bot.send_message(call.message.chat.id, f'–•–æ—Ä–æ—à–æ, —è –Ω–∞–ø–æ–º–Ω—é –≤–∞–º —á–µ—Ä–µ–∑ {callback_data.get("id")} –¥–Ω–µ–π', reply_markup=menu.menu)